{"version":3,"sources":["SortingAlgos/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["getAnimations","array","animation","length","auxArray","slice","mergeSort","mainArray","start","end","mid","Math","floor","leftIdx","rightIdx","mainIdx","push","merge","console","log","swap","firstIdx","secondIdx","animations","temp","SortingVisulizer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","resetArray","w","window","innerWidth","h","innerHeight","i","getRandomIntRange","document","getElementsByClassName","style","backgroundColor","extraSpaceSides","setState","_loop","setTimeout","_this2","j","sortingAlgorithms","arrayBars","_loop2","_animations$i","slicedToArray","firstBar","secondBar","firstBarStyle","secondBarStyle","color","_animations$i2","firstValue","secondValue","height","concat","makeAllOneColor","_this3","_loop3","_animations$i3","_animations$i4","indexChange","_this4","_loop4","_animations$i5","_animations$i6","_this5","react_default","a","createElement","class","onClick","quickSort","bubbleSort","className","left","map","idx","key","width","React","Component","min","max","random","App","SortingVisualizer_SortingVisulizer","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.e592226d.chunk.js","sourcesContent":["export function getAnimations(array){\n    const animation = [];\n    if(array.length <= 1) return array;\n    const auxArray = array.slice();\n    mergeSort(array,0,array.length-1,auxArray,animation);\n    console.log(array);\n    return animation;\n}\n\nfunction mergeSort(mainArray, start, end,auxArray,animation){\n    if (start===end)return;\n    const mid = Math.floor((start + end) / 2);\n    mergeSort(auxArray,start,mid,mainArray,animation);\n    mergeSort(auxArray,mid+1,end,mainArray,animation);\n    merge(mainArray,start,mid,end,auxArray,animation);\n}\n\n\nfunction merge(mainArray,start,mid,end,auxArray,animation){\n\n    let leftIdx=start;\n    let rightIdx=mid+1;\n    let mainIdx=start;\n\n    while(leftIdx<=mid && rightIdx<=end){\n\n        //we are grabbing the two values that we are comparing\n        //in order to highlight these values\n        animation.push([leftIdx,rightIdx]);\n        animation.push([leftIdx,rightIdx]);\n\n        if(auxArray[leftIdx]<=auxArray[rightIdx]){\n            animation.push([mainIdx, auxArray[leftIdx]]);\n            mainArray[mainIdx++] = auxArray[leftIdx++];\n        }else{\n            animation.push([mainIdx, auxArray[rightIdx]]);\n            mainArray[mainIdx++] = auxArray[rightIdx++];\n        }\n    }\n\n    while(leftIdx<=mid){\n        animation.push([leftIdx,leftIdx]);\n        animation.push([leftIdx,leftIdx]);\n        animation.push([mainIdx, auxArray[leftIdx]]);\n        mainArray[mainIdx++] = auxArray[leftIdx++];\n    }\n    while(rightIdx<=end){\n        animation.push([rightIdx,rightIdx]);\n        animation.push([rightIdx,rightIdx]);\n        animation.push([mainIdx, auxArray[rightIdx]]);\n        mainArray[mainIdx++] = auxArray[rightIdx++];\n    }\n\n    \n}\n\nfunction swap(array,firstIdx,secondIdx,animations){\n    animations.push([firstIdx,secondIdx]);\n    animations.push([firstIdx,secondIdx]);\n    var temp = array[firstIdx];\n    array[firstIdx] = array[secondIdx];\n    array[secondIdx] = temp;\n    animations.push([firstIdx,array[firstIdx],secondIdx,array[secondIdx]]);\n}\n\nexport function bubbleSort(array) {\n    const animations = [];\n    for(let i=0;i<array.length-1;i++){\n        for(let j=0;j<array.length-i-1;j++){\n            if(array[j]>array[j+1]){\n                swap(array,j,j+1,animations);\n            }else{\n                \n                animations.push([j,j+1]);\n                animations.push([j,j+1]);\n                animations.push([-1,-1,-1,-1]);\n            }\n        }\n    }\n    console.log(array);\n    return animations;\n}\n\nexport function quickSort(array, low, high){\n    const animations = [];\n    if (low < high){\n        let pi = partition(array, low, high);\n        quickSort(array,low, pi-1);\n        quickSort(array,pi+1,high);\n    }\n    return animations;\n}\n\nfunction partition(array, low, high,animations){\n    let pivot = array[high];\n    let k = low-1;\n    let i=low;\n    for(i=low;i<=high;i++){\n        animations.push([i,k]);\n        animations.push([i,k]);\n        if(array[i]<pivot){\n            animations.push([k,array[k],i,array[i]]);\n            k++;\n            swap(array,i,k,animations);\n        } else{\n            animations.push([-1,-1,-1,-1]);\n        }\n    }\n    animations.push([i,k]);\n    animations.push([i,k]);\n    animations.push([k,array[k],i,array[i]]);\n    swap(array,k+1,high,animations);\n    return k+1;\n}\n\n// export function insertionSort(array){\n//     const animations = [];\n//     let n = array.length;\n//     let i, key, k;\n\n//     for(i=1;i<n;i++){\n//         key = array[i];\n//         k=i-1;\n//         while (k >= 0 && array[k] > key) {  \n            \n//             animations.push([i,k]);\n//             animations.push([i,k]);\n//             animations.push([k+1,array[k+1],k,array[k]]);\n//             array[k + 1] = array[k];\n//             k--;\n//         }  \n//         animations.push([i,k]);\n//         animations.push([i,k]);\n//         animations.push([k+1,array[k+1],key,array[key+1]]);\n//         array[k + 1] = key;\n//     }\n\n//     return animations;\n// }","import React from 'react';\nimport * as sortingAlgorithms from \"../SortingAlgos/sortingAlgorithms.js\";\nimport \"./SortingVisualizer.css\";\n\nconst ANIMATION_SPEED = 4;\nconst COMPLETE_COLOR = \"#2EB086\";\nconst DEFAULT_COLOR = \"black\";\nconst COMPARE_COLOR = \"#B8405E\";\n\nexport default class SortingVisulizer extends React.Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            array: [],\n            value: 0,\n        }\n    }\n\n    componentDidMount(){\n        this.resetArray();\n    }\n\n    //creats an new random array based on screen size\n    resetArray() {\n        var w = window.innerWidth;\n        var h = window.innerHeight;\n        const array = [];\n        \n        // creating size and height of array, based on screen size\n        if(window.innerHeight>616){\n            for (let i = 0; i<w/17;i++){\n                array.push(getRandomIntRange(5,h*.8));\n            }\n        }else{\n            for (let i = 0; i<w/17;i++){\n                array.push(getRandomIntRange(5,h*.6));\n            }\n        }\n\n        //setting the block colors back to black\n        for(let i=0;i<this.state.array.length;i++){\n                document.getElementsByClassName(\"array-bar\")[i].style.backgroundColor = DEFAULT_COLOR;\n        }\n\n        const extraSpaceSides = w-(this.state.array.length)*15;\n        this.setState({array,extraSpaceSides});\n    }\n\n    //makes the finished array a given color\n    makeAllOneColor(){\n        for(let i=0;i<this.state.array.length;i++){\n            setTimeout(() => {\n                document.getElementsByClassName(\"array-bar\")[i].style.backgroundColor = COMPLETE_COLOR;\n            }, i*ANIMATION_SPEED);\n        }\n    }\n\n    //Animating bubble sort\n    bubbleSort(){\n        const animations = sortingAlgorithms.bubbleSort(this.state.array);\n        const arrayBars = document.getElementsByClassName(\"array-bar\");\n        for(let i=0;i<animations.length;i++){\n            if(i%3!==2){\n                const [firstBar, secondBar] = animations[i];\n                const firstBarStyle = arrayBars[firstBar].style;\n                const secondBarStyle = arrayBars[secondBar].style;\n                let color = i%3===0 ? \"red\" : \"black\";\n                setTimeout(() => {\n                    firstBarStyle.backgroundColor = color;\n                    secondBarStyle.backgroundColor = color;\n                }, i*ANIMATION_SPEED);\n            }else{\n                setTimeout(() => {\n                    const [firstIdx, firstValue,secondIdx,secondValue] = animations[i];\n                    if(firstIdx>=0){\n                        arrayBars[firstIdx].style.height = (`${firstValue}px`);\n                        arrayBars[secondIdx].style.height = (`${secondValue}px`);\n                    }\n                }, i*ANIMATION_SPEED);\n            }\n            setTimeout(() => {\n                if(i===animations.length-1) this.makeAllOneColor();\n            }, i*ANIMATION_SPEED);\n        }\n    }\n    \n    //Animating merge sort\n    mergeSort(){\n        const animations = sortingAlgorithms.getAnimations(this.state.array);\n        const normalColor = DEFAULT_COLOR;\n        const switchColor = COMPARE_COLOR;\n        const arrayBars = document.getElementsByClassName(\"array-bar\");\n        for(let i=0;i<animations.length;i++){\n            if(i % 3 !== 2){\n                const [firstBar, secondBar] = animations[i];\n                const firstBarStyle = arrayBars[firstBar].style;\n                const secondBarStyle = arrayBars[secondBar].style;\n                let color = i%3===0 ? switchColor : normalColor;\n                setTimeout(() => {\n                    firstBarStyle.backgroundColor = color;\n                    secondBarStyle.backgroundColor = color;\n                }, i*ANIMATION_SPEED);\n            } else{\n                setTimeout(() => {\n                    const [indexChange,height] = animations[i]\n                    const changeBar = arrayBars[indexChange].style;\n                    changeBar.height = `${height}px`;\n                }, i*ANIMATION_SPEED);\n            }\n            setTimeout(() => {\n                if(i===animations.length-1) this.makeAllOneColor();\n            }, i*ANIMATION_SPEED);\n        }\n        \n    }\n\n    //Animating quick sort\n    quickSort(){\n        const animations = sortingAlgorithms.getAnimations(this.state.array);\n        const arrayBars = document.getElementsByClassName(\"array-bar\");\n        for(let i=0;i<animations.length;i++){\n            if(i%3!==2){\n                const [firstBar, secondBar] = animations[i];\n                const firstBarStyle = arrayBars[firstBar].style;\n                const secondBarStyle = arrayBars[secondBar].style;\n                let color = i%3===0 ? COMPARE_COLOR : DEFAULT_COLOR;\n                setTimeout(() => {\n                    firstBarStyle.backgroundColor = color;\n                    secondBarStyle.backgroundColor = color;\n                }, i*ANIMATION_SPEED);\n            }else{\n                setTimeout(() => {\n                    if(animations[i[0]]!==-1){\n                        // eslint-disable-next-line\n                        const [firstIdx, firstValue,secondIdx,secondValue] = animations[i];\n                        arrayBars[firstIdx].style.height = (`${firstValue}px`);\n                    }\n                }, i*ANIMATION_SPEED);\n            }\n            setTimeout(() => {\n                if(i===animations.length-1) this.makeAllOneColor();\n            }, i*ANIMATION_SPEED);\n        }\n    }\n\n    //used for testing functions\n    run100TestsMergeSort() {\n        for(let i=0;i<3;i++){\n            this.mergeSort();\n            this.resetArray();\n        }\n    }\n\n    render () {\n        const {array} = this.state;\n        return (\n            <div>\n                <div class=\"header\">\n                        <button onClick={() => this.resetArray()}>Create a new random array</button>\n                        <button onClick={()=> this.quickSort()}>Start Quick Sort</button>\n                        <button onClick={()=> this.mergeSort()}>Start Merge Sort</button>\n                        <button onClick={()=> this.bubbleSort()}>Start Bubble Sort</button>\n                </div>\n                <div className=\"array-container\"\n                style={{left: `${this.state.extraSpaceSides/2}px`,}}\n                >\n                    {array.map((value, idx) => (\n                        <div className=\"array-bar\"\n                        key={idx}\n                        style={{height: `${value}px`,\n                        width: \"14px\",\n                        backgroundColor: DEFAULT_COLOR}}>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        )\n    }\n\n}\n\n//gets an random int within a range\nfunction getRandomIntRange(min,max) {\n    return Math.floor(Math.random() * (max-min+1)+min);\n  }\n\n//checks if arrays are equal (for testing)\n// eslint-disable-next-line\nfunction checkArraysEqual(first,second){\n    if(first.length !== second.length) return false;\n    for(let i=0; i<first.length; i++){\n        if(first[i]!==second[i])return false;\n    }\n    return true;\n}","import React from 'react';\nimport './App.css';\nimport SortingVisulizer from './SortingVisualizer/SortingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisulizer></SortingVisulizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}